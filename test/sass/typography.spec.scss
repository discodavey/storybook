@use "sass:math";
@use  "test" as *;
@use "../../src/shared-styles/baseline";
@use "../../src/shared-styles/font";
@use "../../src/shared-styles/scale";
@use "../../src/shared-styles/typography";

@function _calcExpectedFontPx($scale-point) {
  $base-font-size: font.$size;
  $calculatedFontSize: $base-font-size;
  @if $scale-point > 0 {
    @for $i from 1 through $scale-point {
      $calculatedFontSize: $calculatedFontSize * scale.$ratio;
    }
  }
  @return math.round($calculatedFontSize);
}

@include describe('@mixin h1') {

  @include it('has correct typography') {

    @include assert() {

      @include output {
        @include typography.h1()
      }

      @include expect {
        $expectedFontPx: _calcExpectedFontPx($scale-point: 7);
        font-family: "Noto Sans", Arial, Helvetica, sans-serif;
        font-size: #{$expectedFontPx / font.$size}rem;
        font-weight: 600;
        line-height: baseline.for-units(8) / $expectedFontPx;
      }

    }

  }

}

@include describe('@mixin h2') {

  @include it('has correct typography') {

    @include assert() {

      @include output {
        @include typography.h2()
      }

      @include expect {
        $expectedFontPx: _calcExpectedFontPx($scale-point: 4);
        font-family: "Noto Sans", Arial, Helvetica, sans-serif;
        font-size: #{$expectedFontPx / font.$size}rem;
        font-weight: 600;
        line-height: baseline.for-units(5) / $expectedFontPx;
      }

    }

  }

}

@include describe('@mixin h3') {

  @include it('has correct typography') {

    @include assert() {

      @include output {
        @include typography.h3()
      }

      @include expect {
        $expectedFontPx: _calcExpectedFontPx($scale-point: 3);
        font-family: "Noto Sans", Arial, Helvetica, sans-serif;
        font-size: #{$expectedFontPx / font.$size}rem;
        font-weight: 600;
        line-height: baseline.for-units(4) / $expectedFontPx;
      }

    }

  }

}

@include describe('@mixin h4') {

  @include it('has correct typography') {

    @include assert() {

      @include output {
        @include typography.h4()
      }

      @include expect {
        $expectedFontPx: _calcExpectedFontPx($scale-point: 2);
        font-family: "Noto Sans", Arial, Helvetica, sans-serif;
        font-size: #{$expectedFontPx / font.$size}rem;
        font-weight: 600;
        line-height: baseline.for-units(4) / $expectedFontPx;
      }

    }

  }

}

@include describe('@mixin h5') {

  @include it('has correct typography') {

    @include assert() {

      @include output {
        @include typography.h5()
      }

      @include expect {
        $expectedFontPx: _calcExpectedFontPx($scale-point: 1);
        font-family: "Noto Sans", Arial, Helvetica, sans-serif;
        font-size: #{$expectedFontPx / font.$size}rem;
        font-weight: 600;
        line-height: baseline.for-units(4) / $expectedFontPx;
      }

    }

  }

}

@include describe('@mixin h6') {

  @include it('has correct typography') {

    @include assert() {

      @include output {
        @include typography.h6()
      }

      @include expect {
        $expectedFontPx: _calcExpectedFontPx($scale-point: 0);
        font-family: "Noto Sans", Arial, Helvetica, sans-serif;
        font-size: #{$expectedFontPx / font.$size}rem;
        font-weight: 600;
        line-height: baseline.for-units(4) / $expectedFontPx;
      }

    }

  }

}

@include describe('@mixin label-as-content') {

  @include it('generates correct default styles') {

    @include assert() {

      @include output {
        @include typography.label-as-content();
      }

      @include expect {
        color: rgb(102, 102, 102);
        letter-spacing: 0.5px;
        font-family: "Noto Sans", Arial, Helvetica, sans-serif;
        font-size: 0.6875rem;
        font-weight: 400;
        line-height: 2.1818181818;
        text-transform: uppercase;
      }

    }

  }

  @include it('allows the color to be overridden') {

    @include assert() {

      $_acolor: rgb(2, 119, 189);

      @include output {
        @include typography.label-as-content($color: $_acolor);
      }

      @include expect {
        color: $_acolor;
        letter-spacing: 0.5px;
        font-family: "Noto Sans", Arial, Helvetica, sans-serif;
        font-size: 0.6875rem;
        font-weight: 400;
        line-height: 2.1818181818;
        text-transform: uppercase;
      }

    }

  }

  @include it('allows the text-transform to be overridden') {

    @include assert() {

      $_acolor: rgb(102, 102, 102);

      @include output {
        @include typography.label-as-content($uppercase: false);
      }

      @include expect {
        color: $_acolor;
        letter-spacing: 0.5px;
        font-family: "Noto Sans", Arial, Helvetica, sans-serif;
        font-size: 0.6875rem;
        font-weight: 400;
        line-height: 2.1818181818;
      }

    }

  }

  @include it('allows both the color and the text-transform to be overridden') {

    @include assert() {

      $_acolor: rgb(2, 119, 189);

      @include output {
        @include typography.label-as-content($color: $_acolor, $uppercase: false);
      }

      @include expect {
        color: $_acolor;
        letter-spacing: 0.5px;
        font-family: "Noto Sans", Arial, Helvetica, sans-serif;
        font-size: 0.6875rem;
        font-weight: 400;
        line-height: 2.1818181818;
      }

    }

  }

}
